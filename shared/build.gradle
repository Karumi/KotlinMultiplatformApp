import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

group 'com.karumi'
version '0.0.1'

apply plugin: "kotlin-multiplatform"
apply plugin: 'com.android.library'
apply plugin: "kotlinx-serialization"
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: "org.jlleitschuh.gradle.ktlint"

android {
    defaultConfig {
        compileSdkVersion 28
    }
    packagingOptions {
        exclude "META-INF/*"
    }
}

kotlin {
    final def iosTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
    targetFromPreset(iosTarget, "ios") {
        binaries {
            framework("Shared")
        }
    }
    android()

    sourceSets {
        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental')
            }
        }
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"

                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
                implementation "io.ktor:ktor-client-serialization:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"

                //implementation "io.ktor:ktor-client-mock-native:$ktor_version"
                api "io.ktor:ktor-client-mock:$ktor_version"
            }
        }
        androidMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

                implementation "io.ktor:ktor-client-android:$ktor_version"
                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
            }
        }
        androidTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

                implementation "io.ktor:ktor-client-mock-jvm:$ktor_version"

                // TODO below dependencies can be removed after KT-29343 is fixed
                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
            }
        }
        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"

                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-core-native:$ktor_version"
                implementation "io.ktor:ktor-client-json-native:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-native:$ktor_version"
            }
        }
        iosTest {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"

                implementation "io.ktor:ktor-client-mock-native:$ktor_version"
            }
        }
    }
}

configurations {
    compileClasspath
}

task kotlinConfiguration(type: Sync) {
    println "Generating kotlin configuration"

    def generatedSources = new File(buildDir, "generated/kotlin/config")
    generatedSources.mkdirs()
    kotlin.sourceSets.commonMain.kotlin.srcDirs += generatedSources

    def localPropertiesFile = project.file("gradle.properties")
    def localProperties = new Properties()
    localProperties.load(new FileInputStream(localPropertiesFile))

    def propertiesVariables = ""
    for (entry in localProperties) {
        def key = entry.key.toUpperCase()
        propertiesVariables += "\n  val $key = $entry.value"
    }

    def kotlinConfig = new File(generatedSources, "KotlinConfig.kt")
    kotlinConfig.text =
            "package com.karumi.gallery.generated\nobject KotlinConfig {$propertiesVariables\n}"

    println "Kotlin configuration done"
}

tasks.build.dependsOn kotlinConfiguration

task copyFramework {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def framework = kotlin.targets.ios.compilations.main.target.binaries.findFramework("Shared", buildType)
    dependsOn framework.linkTask

    doLast {
        def srcFile = framework.outputFile
        copy {
            from srcFile.parent
            into frameworkDir
            include 'Shared.framework/**'
            include 'Shared.framework.dSYM'
        }
    }
}

ktlint {
    version = "0.30.0"
    verbose = true
    android = false
    outputToConsole = true
    reporters = [ReporterType.PLAIN, ReporterType.CHECKSTYLE]
    filter {
        exclude("**/generated/**")
        include("**/kotlin/**")
    }
}

apply from: "gradleconfig/lint.gradle"
